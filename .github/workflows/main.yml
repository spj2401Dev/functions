name: Deploy Blazor App and Database

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'
    
    - name: Restore dependencies
      run: |
        dotnet restore Server/
        dotnet restore Client/
    
    - name: Build Server
      run: dotnet build Server/ --configuration Release --no-restore
    
    - name: Build Client
      run: dotnet build Client/ --configuration Release --no-restore
    
    - name: Publish Server
      run: dotnet publish Server/ --configuration Release --no-build --output publish/server
    
    - name: Publish Client
      run: dotnet publish Client/ --configuration Release --no-build --output publish/client
    
    - name: Create server appsettings.json from secrets
      env:
        SERVER_APP_SETTINGS: ${{ secrets.SERVER_APP_SETTINGS }}
      run: |
        echo "$SERVER_APP_SETTINGS" > publish/server/appsettings.json
        echo "Overwritten server appsettings.json with secrets"
        
    - name: Create client appsettings.json from secrets
      env:
        CLIENT_APP_SETTINGS: ${{ secrets.CLIENT_APP_SETTINGS }}
      run: |
        echo "$CLIENT_APP_SETTINGS" > publish/client/wwwroot/appsettings.json
        echo "Overwritten client appsettings.json with secrets"
    
    - name: Install sshpass
      run: sudo apt-get install -y sshpass
    
    - name: Add host key to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
    
    - name: Deploy to Ubuntu Server
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        sshpass -e rsync -avz --delete publish/server/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/functions/Functions/Client
        sshpass -e rsync -avz --delete publish/client/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/home/functions/Functions/Server

  build-database:
    runs-on: windows-latest
    environment: Production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Install SQLPackage
      run: |
        Invoke-WebRequest -Uri "https://aka.ms/sqlpackage-windows" -OutFile "sqlpackage.zip"
        Expand-Archive -Path "sqlpackage.zip" -DestinationPath "C:\\sqlpackage"
        echo "C:\\sqlpackage" | Out-File -Append -FilePath $env:GITHUB_PATH
    
    - name: Build Database Project
      run: msbuild Functions.Database/Functions.Database.sqlproj /p:Configuration=Release /t:Build
    
    - name: Deploy Database Changes
      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        C:\sqlpackage\sqlpackage.exe /Action:Publish `
        /SourceFile:Functions.Database/bin/Release/Functions.Database.dacpac `
        /TargetConnectionString:"Server=$env:DB_SERVER;Database=$env:DB_NAME;User Id=$env:DB_USER;Password=$env:DB_PASSWORD;TrustServerCertificate=True"

  restart-server:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, build-database]
    
    steps:
    - name: Restart Application
      env:
        SSHPASS: ${{ secrets.SERVER_PASSWORD }}
      run: |
        sshpass -e ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} 'sudo systemctl restart functions-server.service'
        echo "Application restarted successfully"
