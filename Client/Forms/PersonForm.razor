@using Functions.Shared.Enum
@using Functions.Shared.Extensions
@using Microsoft.AspNetCore.Components.Forms
<EditForm class="form" Model="@person" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <h1 class="formtitle text-center">Persönliche Daten</h1>
    <br />

    <div class="person-input show-input">
        <label for="name">Vorname</label>
        <input type="text" id="name" placeholder="Vorname" @bind-value="person.FirstName" />
        <ValidationMessage For="@(()=> person.FirstName)" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.FirstName) ? "show-input" : "")">
        <label for="surname">Nachname</label>
        <input type="text" id="surname" placeholder="Nachname" @bind-value="person.LastName" />
        <ValidationMessage For="@(()=> person.LastName)" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.LastName) ? "show-input" : "")">
        <label for="birthdate">Geburtsdatum</label>
        <input type="date" id="birthdate" placeholder="Geburtsdatum" @bind-value="person.Birthday" />
        <ValidationMessage For="@(()=> person.Birthday)" />
    </div>

    <div class="person-input @(person.Birthday != DateTime.MinValue ? "show-input" : "")">
        <label for="mail">Email</label>
        <input type="email" id="mail" placeholder="Email" @bind-value="person.Email" />
        <ValidationMessage For="@(()=> person.Email)" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.Email) ? "show-input" : "")">
        <label for="phone">Handy Nummer</label>
        <input type="text" id="phone" placeholder="Nummer" @bind-value="person.PhoneNumber" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.PhoneNumber) ? "show-input" : "")">
        <label for="street">Straße</label>
        <input type="text" id="street" placeholder="Straße" @bind-value="person.Street" />
        <ValidationMessage For="@(()=> person.Street)" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.Street) ? "show-input" : "")">
        <label for="plz">PLZ</label>
        <input type="text" id="plz" placeholder="PLZ" @bind-value="person.Zip" />
        <ValidationMessage For="@(()=> person.Zip)" />
    </div>

    <div class="person-input @(person.Zip >0 ? "show-input" : "")">
        <label for="city">Ort</label>
        <input type="text" id="city" placeholder="Ort" @bind-value="person.City" />
        <ValidationMessage For="@(()=> person.City)" />
    </div>

    <div class="person-input @(!string.IsNullOrEmpty(person.City) ? "show-input" : "")">
        <fieldset>
            <legend>Beschäftigungsstatus</legend>

            @foreach (EmploymentStatus employment in Enum.GetValues(typeof(EmploymentStatus)))
            {
                <div class="button-group">
                    <input type="radio" id="@employment.ToString()" name="employmentStatus"
                           value="@employment" @onchange="@(e => person.EmploymentStatus = employment)"
                           checked="@(person.EmploymentStatus == employment)" />
                    <label for="@employment.ToString()">@(employment.GetDescription())</label>
                </div>
            }
        </fieldset>

        <ValidationMessage For="@(()=> person.EmploymentStatus)" />
    </div>


    <!-- If user is Pupil -->
    @if (person.EmploymentStatus == EmploymentStatus.Pupil)
    {
        <div class="person-input @(person.EmploymentStatus != null ? "show-input" : "")">
            <label for="schoolType">Schulart</label>
            <fieldset id="schoolType">
                @foreach (SchoolType school in Enum.GetValues(typeof(SchoolType)))
                {
                    <div class="button-group">
                        <input type="radio" id="@school.ToString()" name="schoolType"
                               value="@school" @onchange="@(e => person.SchoolType = school)"
                               checked="@(person.SchoolType == school)" />
                        <label for="@school.ToString()">@(school.GetDescription())</label>
                    </div>
                }
            </fieldset>
            <ValidationMessage For="@(()=> person.SchoolType)" />
        </div>

        <div class="person-input @(person.SchoolType != null ? "show-input" : "")">
            <label for="schoolyear">Klasse</label>
            <input type="number" id="schoolyear" placeholder="Klasse" @bind-value="person.SchoolYear" />
            <ValidationMessage For="@(()=> person.SchoolYear)" />
        </div>
    }

    <!-- If user is Student -->

    @if (person.EmploymentStatus == EmploymentStatus.Student)
    {
        <div class="person-input @(person.EmploymentStatus != null ? "show-input" : "")">
            <label for="study">Studiengang</label>
            <input type="text" id="study" placeholder="Studiengang" @bind-value="person.FieldOfStudy" />
            <ValidationMessage For="@(()=> person.FieldOfStudy)" />
        </div>

        <div class="person-input @(person.FieldOfStudy != null ? "show-input" : "")">
            <label for="semester">Semester</label>
            <input type="number" id="semester" placeholder="Semester" @bind-value="person.Semester" />
            <ValidationMessage For="@(()=> person.Semester)" />
        </div>
    }

</EditForm>

