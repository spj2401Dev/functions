@inject NavigationManager navigationManager
@inject AuthService authService

<div class="container-header">
    <div class="left-section">
        <div class="header">
            <h1>
                <NavLink href="" class="headerLink" style="padding-right:1em">Funktions</NavLink>
            </h1>
        </div>
        <NavLink href="events" class="headerLink" style="padding-right:1em">Events Overview</NavLink>
        <NavLink @onclick="RedirectToNewEvent" class="headerLink">New Event</NavLink>
    </div>
    <div class="login">
        @if (isAuthenticated)
        {
            <span @onclick="Logout" style="cursor: pointer;">
                <i class="fa-solid fa-user" style="margin-right: 8px"></i>@username
            </span>
        }
        else
        {
            <button @onclick="NavigateToRegister">Register</button>
            <button @onclick="NavigateToLogin">Login</button>
        }
    </div>
</div>

@code {
    private bool isAuthenticated;
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await authService.IsAuthenticated();
        if (isAuthenticated)
        {
            username = "@" + await authService.GetUsername();
        }
    }

    private void NavigateToRegister()
    {
        navigationManager.NavigateTo("register", false);
    }

    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("login", false);
    }

    private async Task Logout()
    {
        await authService.Logout();
        navigationManager.NavigateTo("/", true);
    }

    private void RedirectToNewEvent()
    {
        if (isAuthenticated)
        {
            navigationManager.NavigateTo("events/new", false);
        }
        else
        {
            navigationManager.NavigateTo("login/events/new", false);
        }
    }
}
